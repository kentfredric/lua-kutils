Usage
======

This package exports only really one function of use to a user, `kutils.pp.pp`.

Every other function is really implementation detail.

For your conveneince, `kutils.pp.pp()` can be called by calling `kutils.pp()`, due to a bit of metatable magic.

```lua

require "kutils.pp"

io.write(kutils.pp( anything ))

```

Tunable Defaults
====

`pp_table`
----

```lua
kutils.pp._set_default('pp_table', variant )
```

Selects what formatting method to use for pretty printing `table` objects.


 * `simple` - Uses a very terse notation. ie: `table<?>`
 * `names` - Emits a list of tables property names, ie:
 `table<[ attr, attr, attr ]>`
 * `recursive_0` - Attempts to pretty-print the whole table:

```
table<{
	foo = bar
	quux = doo
}>
```

The value on the right hand side of this equation is governed by `pp_table_leaf`


`pp_table_leaf`
----

```lua
kutils.pp._set_default('pp_table_leaf', variant )
```

Selects the method to use for pretty printing table leaves.

 * `simple` - Uses the very terse notation for **all** leaves.
 * `recursive_0` - Uses `pp` recursively to generate all leaves, with exceptions in place for a few common infinite-recursion edge cases. ( Namely `_M` )


*Note:* This code, except for notable known indefiniate recursive cases, has no code to avoid indefinate recursion, and should your code have a self-referencing structure, traversal will cause a stack overflow.

To avoid this, either make a custom leaf walker with `kutils.pp._add_dispatch` or get rid of the self-referencing structure.

`pp_function`
----

```lua
kutils.pp._set_default('pp_function', variant )
```

Selects the method for pretty-printing functions.

Pretty printing function tables as it is proves not to be very practical, so this option defaults to `simple`

 * `simple` - Just prints a basic placeholder statement
 * `recursive_0` - Very much like `pp_table/recursive_0` , except with a functions table instead, ( and with `pp_function_leaf` instead of `pp_table_leaf`)


`pp_function_leaf`
----

```lua
kutils.pp._set_default('pp_function_leaf', variant )
```

Selects the method for pretty-printing function-table leaves.

Essentially, all that applies to tables applies to functions, except the known recursive names are only `func` instead of `_M`.

 * `simple` - Print basic flat information ( just like `pp_table_leaf/simple` )
 * `recursive_0` - Print as deep as possible while trying to avoid known stack overflow causers. ( like `pp_table_leaf/recursive_0` )


